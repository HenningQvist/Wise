const cors = require('cors');
const express = require('express');
const passport = require('passport');
const cookieParser = require('cookie-parser'); // ‚úÖ N√∂dv√§ndig f√∂r att Passport ska hitta JWT i cookies

// üßπ Sanera URL:er
const sanitizeUrl = (req, res, next) => {
  req.url = req.url.replace(/%0A/g, '');
  next();
};

// üß© CORS & global middleware
module.exports = (app) => {
  // H√§mta till√•tna origins fr√•n milj√∂
  const allowedOrigins = (process.env.ALLOWED_ORIGINS || '')
    .split(',')
    .map(o => o.trim())
    .filter(Boolean);

  if (allowedOrigins.length === 0) {
    console.warn('‚ö†Ô∏è Ingen ALLOWED_ORIGINS satt! CORS kan blockera alla f√∂rfr√•gningar.');
  } else {
    console.log('üåç Till√•tna origins:', allowedOrigins.join(', '));
  }

  const corsOptions = {
    origin: function (origin, callback) {
      // Till√•t preflight/f√∂rfr√•gningar utan origin
      if (!origin) return callback(null, true);

      if (allowedOrigins.includes(origin)) {
        return callback(null, true);
      } else {
        console.warn('üö´ Blockerad CORS-f√∂rfr√•gan fr√•n:', origin);
        return callback(null, false); // Blockera men returnera ej error (viktigt f√∂r cookies)
      }
    },
    credentials: true, // ‚úÖ Viktigt f√∂r cookies
    allowedHeaders: ['Content-Type', 'Authorization'],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
  };

  // üß© Middleware i r√§tt ordning
  app.use(cors(corsOptions));
  app.options('*', cors(corsOptions)); // Preflight
  app.use(cookieParser());             // ‚úÖ M√•ste komma F√ñRE Passport
  app.use(express.json());
  app.use(passport.initialize());
  app.use(sanitizeUrl);
};
