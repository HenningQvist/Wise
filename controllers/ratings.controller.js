const jwt = require('jsonwebtoken');
const Rating = require('../models/ratings.model'); // Importera Rating-modellen

// Spara eller uppdatera ratings f√∂r en deltagare
const saveRatings = async (req, res) => {
  try {
    const { participantId } = req.params; // H√§mta participantId fr√•n URL
    const ratings = req.body; // H√§mta ratings fr√•n request body

    // Kontrollera om ratings finns i request body
    if (!ratings || Object.keys(ratings).length === 0) {
      return res.status(400).json({
        message: 'Rating data saknas i request body',
      });
    }

    // Kontrollera om alla n√∂dv√§ndiga ratings f√§lt finns
    const requiredFields = [
      'hantering_av_vardagen',
      'h√§lsa',
      'koncentrationsf√∂rm√•ga',
      'tro_p√•_att_f√•_jobb',
      'st√∂d_fr√•n_n√§tverk',
      'samarbetsf√∂rm√•ga',
      'jobbs√∂kningsbeteende',
      'kunskap_om_arbetsmarknaden',
      'm√•lmedvetenhet',
    ];

    for (let field of requiredFields) {
      if (!ratings[field]) {
        return res.status(400).json({
          message: `F√§ltet ${field} saknas i request body`,
        });
      }
    }

    // H√§mta token fr√•n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f√• den dekodade anv√§ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('üîπ Token verifierad:', decoded);

    // Spara rating i databasen med Rating.save()
    const savedRating = await Rating.save(participantId, ratings);

    return res.status(201).json({
      message: 'Skattningar sparade!',
      data: savedRating,
    });
  } catch (error) {
    console.error('‚ùå Fel vid sparande av ratings:', error);
    return res.status(500).json({
      message: 'Det gick inte att spara skattningar',
      error: error.message,
    });
  }
};

// H√§mta den senaste rating f√∂r en deltagare
const getLatestRating = async (req, res) => {
  try {
    const { participantId } = req.params; // H√§mta participantId fr√•n URL

    // H√§mta token fr√•n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f√• den dekodade anv√§ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('üîπ Token verifierad:', decoded);

    // H√§mta den senaste rating f√∂r deltagaren med Rating.getByUserId()
    const rating = await Rating.getByUserId(participantId);
    if (!rating) {
      return res.status(404).json({ message: 'Ingen rating hittades f√∂r deltagaren.' });
    }

    return res.json(rating); // Returnera den senaste ratingen om den finns
  } catch (error) {
    console.error('‚ùå Fel vid h√§mtning av senaste rating:', error);
    return res.status(500).json({ message: 'Serverfel vid h√§mtning av rating' });
  }
};

// H√§mta f√∂rsta och senaste rating
const getFirstAndLatestRating = async (req, res) => {
  try {
    const { participantId } = req.params;

    // H√§mta token fr√•n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f√• den dekodade anv√§ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('üîπ Token verifierad:', decoded);

    // H√§mta f√∂rsta och senaste ratingen
    const firstRating = await Rating.getFirstByUserId(participantId);
    const latestRating = await Rating.getByUserId(participantId);

    if (!firstRating || !latestRating) {
      return res.status(404).json({ message: 'Kunde inte hitta b√•de f√∂rsta och senaste ratingen.' });
    }

    return res.json({ firstRating, latestRating });
  } catch (error) {
    console.error('‚ùå Fel vid h√§mtning av f√∂rsta och senaste rating:', error);
    return res.status(500).json({ message: 'Serverfel vid h√§mtning av rating' });
  }
};

// H√§mta alla ratings f√∂r en deltagare
const getAllRatings = async (req, res) => {
  try {
    const { participantId } = req.params;

    // H√§mta token fr√•n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f√• den dekodade anv√§ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('üîπ Token verifierad:', decoded);

    // H√§mta alla ratingar f√∂r den angivna deltagaren
    const allRatings = await Rating.getAllByUserId(participantId);

    if (!allRatings || allRatings.length === 0) {
      return res.status(404).json({ message: 'Kunde inte hitta n√•gra ratingar.' });
    }

    return res.json({ allRatings });
  } catch (error) {
    console.error('‚ùå Fel vid h√§mtning av alla ratingar:', error);
    return res.status(500).json({ message: 'Serverfel vid h√§mtning av ratingar' });
  }
};

// Exportera funktionerna
module.exports = { saveRatings, getLatestRating, getFirstAndLatestRating, getAllRatings };
