const bcrypt = require('bcrypt');
const adminModel = require('../models/adminModel'); // Importera modellen f√∂r anv√§ndare

// üîπ H√§mta alla anv√§ndare (kr√§ver admin)
const getUsers = async (req, res) => {
  try {
    if (!req.user || !req.user.admin) {
      return res.status(403).json({ message: '√Ötkomst f√∂rbjuden: Ingen administrat√∂rsbeh√∂righet' });
    }

    const users = await adminModel.getAllUsers();
    res.status(200).json(users);
  } catch (err) {
    console.error('Fel vid h√§mtning av anv√§ndare:', err);
    res.status(500).json({ message: 'Fel vid h√§mtning av anv√§ndare', error: err.message });
  }
};

// üîπ H√§mta anv√§ndare baserat p√• ID
const getUserById = async (req, res) => {
  const { id } = req.params;

  try {
    const user = await adminModel.getUserById(id);
    if (!user) {
      return res.status(404).json({ message: 'Anv√§ndare hittades inte' });
    }

    res.status(200).json(user);
  } catch (err) {
    console.error('Fel vid h√§mtning av anv√§ndare:', err);
    res.status(500).json({ message: 'Serverfel vid h√§mtning av anv√§ndare', error: err.message });
  }
};

// üîπ Uppdatera anv√§ndare
const updateUser = async (req, res) => {
  const { id } = req.params;
  const { username, email, admin, role } = req.body;

  try {
    const user = await adminModel.getUserById(id);
    if (!user) return res.status(404).json({ error: 'Anv√§ndare inte hittad' });

    // Om anv√§ndaren inte √§r admin och f√∂rs√∂ker √§ndra admin-status ‚Üí blockera
    if (!req.user.admin && typeof admin !== 'undefined') {
      return res.status(403).json({ message: 'Endast administrat√∂rer kan √§ndra admin-statusen.' });
    }

    const updatedUser = await adminModel.updateUser(
      id,
      username,
      email,
      admin !== undefined ? admin : user.admin,
      role
    );

    res.json(updatedUser);
  } catch (err) {
    console.error('Fel vid uppdatering av anv√§ndare:', err);
    res.status(500).json({ error: 'Serverfel vid uppdatering av anv√§ndare', details: err.message });
  }
};

// üîπ Ta bort anv√§ndare
const deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    const deletedUser = await adminModel.deleteUser(id);
    res.json({ message: 'Anv√§ndare borttagen', user: deletedUser });
  } catch (err) {
    console.error('Fel vid borttagning av anv√§ndare:', err);
    res.status(500).json({ error: 'Serverfel vid borttagning av anv√§ndare', details: err.message });
  }
};

// üîπ Skapa handl√§ggare
const createHandler = async (req, res) => {
  try {
    const { email, username, password, admin } = req.body;
    const hashedPassword = await bcrypt.hash(password, 12);

    const newUser = await adminModel.createUser(
      email,
      username,
      hashedPassword,
      admin || false
    );

    res.status(201).json({ message: 'Handl√§ggare skapad', user: newUser });
  } catch (err) {
    console.error('Fel vid skapande av handl√§ggare:', err);
    res.status(500).json({ message: 'Fel vid skapande av handl√§ggare', error: err.message });
  }
};

module.exports = {
  getUsers,
  getUserById,
  updateUser,
  deleteUser,
  createHandler,
};
