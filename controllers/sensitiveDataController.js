const jwt = require('jsonwebtoken');
const { getLatestSensitiveData, saveSensitiveData } = require('../models/sensitiveData');

// Controller f칬r att spara k칛nslig data f칬r en deltagare
const saveData = async (req, res) => {
  const { participantId } = req.params;
  const sensitiveData = req.body;

  try {
    // H칛mta token fr친n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f친 den dekodade anv칛ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('游댳 Token verifierad:', decoded);

    // Spara den k칛nsliga datan
    const result = await saveSensitiveData(participantId, sensitiveData);
    res.status(201).json({ message: 'Kartl칛ggning sparad!', data: result });
  } catch (error) {
    console.error('Error saving sensitive data:', error);
    res.status(500).json({ message: 'N친got gick fel vid sparande av kartl칛ggningen.' });
  }
};

// Controller f칬r att h칛mta den senaste kartl칛ggningen f칬r en deltagare
const getData = async (req, res) => {
  const { participantId } = req.params;

  try {
    // H칛mta token fr친n cookies
    const token = req.cookies['token'];
    if (!token) {
      return res.status(401).json({ message: 'No token provided' });
    }

    // Verifiera JWT och f친 den dekodade anv칛ndardatan
    const decoded = jwt.verify(token, process.env.JWT_SECRET, { algorithms: ['HS256'] });
    console.log('游댳 Token verifierad:', decoded);

    // H칛mta den senaste kartl칛ggningen
    const data = await getLatestSensitiveData(participantId);
    if (data) {
      // Om data finns, skicka den som JSON
      res.status(200).json({
        grundl칛ggande_uppgifter: data.grundl칛ggande_uppgifter,
        hantering_av_vardagen: data.hantering_av_vardagen,
        h칛lsa: data.h칛lsa,
        koncentrationsf칬rm친ga: data.koncentrationsf칬rm친ga,
        tro_p친_att_f친_jobb: data.tro_p친_att_f친_jobb,
        st칬d_fr친n_n칛tverk: data.st칬d_fr친n_n칛tverk,
        samarbetsf칬rm친ga: data.samarbetsf칬rm친ga,
        jobbs칬kningsbeteende: data.jobbs칬kningsbeteende,
        kunskap_om_arbetsmarknaden: data.kunskap_om_arbetsmarknaden,
        m친lmedvetenhet: data.m친lmedvetenhet,
      });
    } else {
      res.status(404).json({ message: 'Ingen kartl칛ggning hittades f칬r denna deltagare.' });
    }
  } catch (error) {
    console.error('Error fetching sensitive data:', error);
    res.status(500).json({ message: 'N친got gick fel vid h칛mtning av kartl칛ggningen.' });
  }
};

module.exports = { saveData, getData };
