const { Pool } = require('pg');
require('dotenv').config();  // Ladda milj√∂variabler fr√•n .env

// Kontrollera att alla milj√∂variabler finns
const requiredEnvVars = ['DB_USER', 'DB_HOST', 'DB_NAME', 'DB_PASS', 'DB_PORT', 'JWT_SECRET'];
for (const varName of requiredEnvVars) {
  if (!process.env[varName]) {
    console.error(`‚ùå Saknad milj√∂variabel: ${varName}`);
    process.exit(1);  // Avsluta processen om en milj√∂variabel saknas
  } else {
    console.log(`‚úÖ Milj√∂variabel ${varName} √§r laddad korrekt.`);
  }
}

// PostgreSQL anslutning med milj√∂variabler
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASS,
  port: process.env.DB_PORT,
});

console.log('üîπ PostgreSQL anslutning skapad med f√∂ljande konfiguration:');
console.log(`User: ${process.env.DB_USER}, Host: ${process.env.DB_HOST}, Database: ${process.env.DB_NAME}`);

class Rating {
  constructor(userId, ratings) {
    this.userId = userId;
    this.hantering_av_vardagen = ratings.hantering_av_vardagen;
    this.h√§lsa = ratings.h√§lsa;
    this.koncentrationsf√∂rm√•ga = ratings.koncentrationsf√∂rm√•ga;
    this.tro_p√•_att_f√•_jobb = ratings.tro_p√•_att_f√•_jobb;
    this.st√∂d_fr√•n_n√§tverk = ratings.st√∂d_fr√•n_n√§tverk;
    this.samarbetsf√∂rm√•ga = ratings.samarbetsf√∂rm√•ga;
    this.jobbs√∂kningsbeteende = ratings.jobbs√∂kningsbeteende;
    this.kunskap_om_arbetsmarknaden = ratings.kunskap_om_arbetsmarknaden;
    this.m√•lmedvetenhet = ratings.m√•lmedvetenhet;
  }

  // Spara rating till databasen
  static async save(userId, ratings) {
    const query = `
      INSERT INTO ratings (user_id, hantering_av_vardagen, h√§lsa, koncentrationsf√∂rm√•ga, 
                           tro_p√•_att_f√•_jobb, st√∂d_fr√•n_n√§tverk, samarbetsf√∂rm√•ga, 
                           jobbs√∂kningsbeteende, kunskap_om_arbetsmarknaden, m√•lmedvetenhet, created_at)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
      RETURNING *;
    `;
    const values = [
      userId,
      ratings.hantering_av_vardagen,
      ratings.h√§lsa,
      ratings.koncentrationsf√∂rm√•ga,
      ratings.tro_p√•_att_f√•_jobb,
      ratings.st√∂d_fr√•n_n√§tverk,
      ratings.samarbetsf√∂rm√•ga,
      ratings.jobbs√∂kningsbeteende,
      ratings.kunskap_om_arbetsmarknaden,
      ratings.m√•lmedvetenhet,
    ];

    try {
      const result = await pool.query(query, values);
      console.log("‚úÖ Rating sparades:", result.rows[0]);
      return result.rows[0]; // Returnera den sparade raden
    } catch (error) {
      console.error("‚ùå Fel vid sparande av rating:", error);
      throw error;
    }
  }

  // H√§mta den senaste ratingen f√∂r en anv√§ndare
  static async getByUserId(userId) {
    const query = 'SELECT * FROM ratings WHERE user_id = $1 ORDER BY created_at DESC LIMIT 1;';
    try {
      const result = await pool.query(query, [userId]);
      if (result.rows.length === 0) {
        console.log('‚ùå Ingen rating hittades f√∂r anv√§ndaren.');
        return null;
      }
      return result.rows[0]; // Returnera den senaste ratingen
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av rating:", error);
      throw error;
    }
  }

  // H√§mta den f√∂rsta ratingen f√∂r en anv√§ndare
  static async getFirstByUserId(userId) {
    const query = 'SELECT * FROM ratings WHERE user_id = $1 ORDER BY created_at ASC LIMIT 1;';
    try {
      const result = await pool.query(query, [userId]);
      if (result.rows.length === 0) {
        console.log('‚ùå Ingen f√∂rsta rating hittades f√∂r anv√§ndaren.');
        return null;
      }
      return result.rows[0]; // Returnera den f√∂rsta ratingen
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av f√∂rsta rating:", error);
      throw error;
    }
  }

  // H√§mta b√•de f√∂rsta och senaste ratingen f√∂r en anv√§ndare
  static async getFirstAndLatestByUserId(userId) {
    try {
      const firstRating = await Rating.getFirstByUserId(userId);
      const latestRating = await Rating.getByUserId(userId);

      if (!firstRating || !latestRating) {
        console.log('‚ùå Kunde inte hitta b√•de f√∂rsta och senaste ratingen.');
        return null;
      }

      return { firstRating, latestRating };
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av f√∂rsta och senaste rating:", error);
      throw error;
    }
  }

  // H√§mta alla ratingar f√∂r en anv√§ndare
  static async getAllByUserId(userId) {
    const query = 'SELECT * FROM ratings WHERE user_id = $1 ORDER BY created_at ASC;';
    try {
      const result = await pool.query(query, [userId]);
      if (result.rows.length === 0) {
        console.log('‚ùå Ingen rating hittades f√∂r anv√§ndaren.');
        return null;
      }
      return result.rows; // Returnera alla ratingar f√∂r anv√§ndaren
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av alla ratings:", error);
      throw error;
    }
  }
}

// Exportera klassen
module.exports = Rating;
